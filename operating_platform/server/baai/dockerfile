# 使用 Ubuntu 20.04 基础镜像
FROM ubuntu:20.04

# 配置时区（避免 apt 安装阻塞）
ENV DEBIAN_FRONTEND=noninteractive
# 预先设置时区（关键）
RUN ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        wget bzip2 ca-certificates \
        libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender1 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN apt-get update && apt-get install -y ffmpeg

# 安装 Miniconda（国内镜像加速）
RUN wget -q https://mirrors.bfsu.edu.cn/anaconda/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh && \
    bash miniconda.sh -b -p /opt/miniconda && \
    rm miniconda.sh

# 设置全局 PATH
ENV PATH="/opt/miniconda/bin:$PATH"
RUN conda config --set always_yes yes && \
    conda config --add channels conda-forge && \
    conda clean -afy
 
# 接受 Anaconda ToS（避免后续报错）
RUN conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/main && \
    conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/r

# 使用 conda 安装 ffmpeg
#RUN conda install -y -c conda-forge ffmpeg
# 创建 Conda 环境（从 YAML 文件）
WORKDIR /app
COPY environment.yml .
RUN conda env create -f environment.yml

# 复制本地 wheel 文件到镜像

COPY robot_uploader-1.0.0-py3-none-any.whl /tmp/
# 安装纯 pip 依赖（分离 Conda 与 pip 管理）
COPY requirements.txt .
# 安装依赖时明确使用 Conda 环境的 pip
RUN /opt/miniconda/envs/op/bin/pip install --no-cache-dir \
    /tmp/robot_uploader-1.0.0-py3-none-any.whl && \
    /opt/miniconda/envs/op/bin/pip install --no-cache-dir -r requirements.txt \
    -i https://mirrors.aliyun.com/pypi/simple

# 设置运行时环境变量（关键！）
ENV PATH="/opt/miniconda/envs/op/bin:$PATH"

# 创建代码目录（避免挂载时覆盖 /app）
RUN mkdir -p /app/code
WORKDIR /app/code  

EXPOSE 8088
#CMD ["python", "operating_platform_server_test.py", "--log-output=stdout"]
#CMD ["/app/code/dist/operating_platform_server_test.bin", "--log-output=stdout"]
CMD ["sh", "-c", "if [ -f \"/app/code/dist/operating_platform_server_test.bin\" ]; then \
    /app/code/dist/operating_platform_server_test.bin --log-output=stdout; \
    else \
    python operating_platform_server_test.py --log-output=stdout; \
    fi"]

# 在 Dockerfile 末尾添加（覆盖之前的时区设置）
RUN apt-get update && \
    apt-get install -y tzdata && \
    ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    dpkg-reconfigure -f noninteractive tzdata && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# 确保环境变量 TZ 也被设置

ENV TZ=Asia/Shanghai